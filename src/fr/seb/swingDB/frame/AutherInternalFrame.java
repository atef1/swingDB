/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.seb.swingDB.frame;

import fr.seb.databas.utils.DatabaseConnection;
import java.awt.TextField;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.html.HTML;

/**
 *
 * @author formation
 */
public class AutherInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form AutherInternalFrame
     */
    public AutherInternalFrame() {
        initComponents();
        initTable();
    }

    private void initTable() {
        //recuperation du modele de la JTable
        DefaultTableModel mode1 = (DefaultTableModel) jTable1.getModel();
        mode1.setRowCount(0);

        //recuperation des donnes de la base des données
        //la requete sql
        String sql = "SELECT * FROM auteurs";

        //la connexion a la base de données
        Connection cn;
        try {
            cn = DatabaseConnection.getInstance();
            Statement stm = cn.createStatement();
            //execution de la requete 
            ResultSet rs = stm.executeQuery(sql);

            //tableau d'objet qui represente une ligne de la table 
            Object[] tableRow;

            //boucle sur le resultSet
            while (rs.next()) {
                //construction du tableau des données
                tableRow = new Object[3];
                tableRow[0] = rs.getObject("id");
                tableRow[1] = rs.getObject("prenom");
                tableRow[2] = rs.getObject("nom");

                //ajout du tableau dans une nouvelle ligne de la modèle
                mode1.addRow(tableRow);

            }
            //fermeture des objets de connexion
            rs.close();
            stm.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(AutherInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ajouter = new javax.swing.JButton();
        supprimer = new javax.swing.JButton();
        update = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "prenom", "nom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setText("id");

        jLabel2.setText("prenom");

        jLabel3.setText("nom");

        ajouter.setText("ajouter");
        ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterActionPerformed(evt);
            }
        });

        supprimer.setText("supprimer");
        supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerActionPerformed(evt);
            }
        });

        update.setText("update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 98, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idField)
                    .addComponent(firstNameField)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(supprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ajouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(idField)
                        .addComponent(ajouter))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supprimer))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameField)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(update)))
                .addGap(0, 42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //la ligne sélectionnée
        int selectedIndex = jTable1.getSelectedRow();
        
        //recuperation du modéle
        TableModel model = jTable1.getModel();
        
        //en cas de tri sur la table
        selectedIndex = jTable1.convertRowIndexToModel(selectedIndex);
        
        //recuperation des données de la ligne selectionnée
        String id = model.getValueAt(selectedIndex, 0).toString();
        String name = model.getValueAt(selectedIndex, 2).toString();
        String firstName = model.getValueAt(selectedIndex, 1).toString();
        
        //insertion de données dans les textField
        idField.setText(id);
        nameField.setText(name);
        firstNameField.setText(firstName);
    }//GEN-LAST:event_jTable1MouseClicked

    private void ajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterActionPerformed
       
        try {
            //recuperation de la connection
            Connection cn = DatabaseConnection.getInstance();
            
            String sql = "INSERT INTO auteurs (nom,prenom)VALUES(?,?)";
            
            //preparation de la requete
            PreparedStatement  pstm = cn.prepareStatement(sql);
            pstm.setString(1, nameField.getText());
            pstm.setString(2,firstNameField.getText());
            pstm.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(AutherInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //mise a jour de la table
        initTable();
    }//GEN-LAST:event_ajouterActionPerformed

    private void supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerActionPerformed
        try {
            //recuperation de la connection
            Connection cn = DatabaseConnection.getInstance();
            
            //requete de la suppression
            String sql = "DELETE FROM auteurs WHERE id = ? ";
            
            //preparation de la requete
            PreparedStatement  pstm = cn.prepareStatement(sql);
            pstm.setString(1, idField.getText());
            pstm.executeUpdate();
            
            
        } catch (SQLException ex) {
            Logger.getLogger(AutherInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        initTable();
    }//GEN-LAST:event_supprimerActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try {
            //recuperation de la connection
            Connection cn = DatabaseConnection.getInstance();
            
            //requete sql
            String sql = "UPDATE auteurs SET nom=?, prenom=? WHERE id = ?";
            
            //preparation de la requete
            PreparedStatement  pstm = cn.prepareStatement(sql);
            pstm.setString(3, idField.getText() );
            pstm.setString(1, nameField.getText());
            pstm.setString(2,firstNameField.getText() );
            pstm.executeUpdate();
            int val = pstm.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(AutherInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        initTable();
    }//GEN-LAST:event_updateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajouter;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton supprimer;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
